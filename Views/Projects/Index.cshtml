@model IEnumerable<IssueTracker.Models.Project>;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor httpContextAccessor;

@{
    ViewData["Title"] = "Projects";
}

@functions {
    public int getPeopleCount(int projectId)
    {
        IQueryable<int> projectIds = ViewBag.ProjectIds;
        return projectIds.Where(id => id == projectId).Count();
    }

    public int getIssueCount(int projectId)
    {
        List<Issue> issues = ViewBag.Issues;
        return issues.Where(issue => issue.ProjectId == projectId).Count();
    }

    public int getUserId()
    {
        return @httpContextAccessor?.HttpContext?.Session.GetInt32("UserId") ?? -1;
    }
}

<h4>@ViewData["Title"]</h4>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                People
            </th>
            <th>
                Issues
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TargetEndDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ActualEndDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedOn)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @getPeopleCount(item.ProjectId)
            </td>
            <td>
                @getIssueCount(item.ProjectId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TargetEndDate)
            </td>
            <td>
                @if (item.ActualEndDate.CompareTo(DateTime.MinValue) == 0)
                {
                    if ((item.TargetEndDate).CompareTo(DateTime.Now) < 0)
                    {
                            <p> Project is overdue! </p>
                        }
                    else
                    {
                        <p> Project is in progress </p>
                    }
                }
                else
                {
                    @Html.DisplayFor(modelItem => item.ActualEndDate)
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedOn)
            </td>
            <td>
                <a asp-action="Details" asp-route-id="@item.ProjectId" asp-route-userId="@getUserId()">Details</a> |
                <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#delete" data-bs-projName="@item.Name" data-bs-projId="@item.ProjectId">Delete</button>
                <partial name="_DeleteProjectModal"></partial>
            </td>
        </tr>
        }     
    </tbody>
</table>

<a class="btn btn-primary" asp-action="Create">
    Create new project
</a>

<script>
    var exampleModal = document.getElementById('delete')
    exampleModal.addEventListener('show.bs.modal', function (event) {
    var button = event.relatedTarget

    var id = button.getAttribute('data-bs-projId')
    var name = button.getAttribute('data-bs-projName')

    var modalBodyInput = exampleModal.querySelector('.proj input')
    var modalBodyParagraph = exampleModal.querySelector('.proj p')
    
    modalBodyParagraph.innerHTML = "Are you sure you want to delete project: " + name + "?"
    modalBodyInput.value = id
    })
</script>